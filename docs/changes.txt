1.calculate_dirty(cached list) 호출처
	1)modify_article_word()
	  -> word/meaning/category가 변경되는 경우
	  -> 사라진 기능. updateAll()에서 통합처리 
	
	2)doConfirm()
	  -> examples/keywords가 변경되는 경우
	  -> 사라진 기능.  updateAll()에서 통합처리
	  
	3) updateAll()
	  -> 갱신버튼을 눌러 수정,삭제내역이 서버로 저장되도록 한다.

2.doCollectChg() 호출처ㄴ
  서버로 자료를 보내기위해 서버인터페이스에 맞춰 데이터 수집및 집계.
	1) updateAll()
	  -> 갱신버튼을 눌러 수정,삭제내역이 서버로 저장되도록 한다.


3. $service객체의 역활,기능
 : 변경사항의 상태관리
 : 도메인객체를 직접 관리하지는 않는다.
    -> 항목이 추가되는 것에대해 알지못한다.
    
  - 전체목록을 서버로부터 받을때, 초기화된다.
    : org, dirty객체 생성됨.
  
  - 갱신버튼이 눌려졌을때, 변경대상목록을 받아 변경사항을 일괄 갱신한다.
    
  - 카테고리가 변경되면, 수정사항을 모두 되돌린다.
    -> 도메인객체를 변경한다.
  - 
  
  
  
  
  
  삭제된 코드
// modify_article_word: function(article,event){
                //     event.preventDefault();
                //     // 버튼직전 input태그를 찾는다.
                //     let last = event.target.parentNode.lastChild;
                //     while( last.nodeName != 'DIV') {
                //         last = last.previousElementSibling;
                //     }

                //     // 인수와 같은 요소에 대해 값을 변경한다.
                //     // articles를 변경해도 watch가 동작하지않는데, 이유를 알수없다.
                //     _article={};
                //     this.articles.forEach( (a, i) => {
                //         if(a==article) {
                //             _article = this.articles[i];
                //         }
                //     });

                //     while (last != null) {
                //         // li안의 input tag
                //         const input_tag = last.firstChild;

                //         // input태그의 이름을 가져온다.
                //         const attr = input_tag.getAttribute('name'),
                //               value = (input_tag.tagName=='SELECT')? 
                //                         input_tag.options[input_tag.selectedIndex].text
                //                         :input_tag.value;

                //         _article[attr] = value;
                //         console.log("ar mod3:", value, attr);

                //         last = last.previousElementSibling;
                //     }
                //     // dirty 체크를 수행한다.
                //     // this.calculate_dirty();
                //     this.$service.refresh(this.cached);
                // },

// articlesClone:function(){
                //     this.articles.forEach( a =>{
                //         a_clone1 = JSON.parse(JSON.stringify(a));
                //         a_clone2 = JSON.parse(JSON.stringify(a_clone1));
                //         // a_clone1 = Object.assign({}, a);
                //         // a_clone1.setAttribute('@blur','doConfirm(article, index, $event)');
                //         // a_clone2 = Object.assign({}, a_clone1);
                //         // a_clone2.setAttribute('@blur','doConfirm(article, index, $event)');
                //         a['org'] = a_clone1;
                //         // dirty체크용 오브젝트를 생성. 초기값은 false
                //         for(var property in a_clone2) {
                //             if ( a_clone2[property] instanceof Array) {
                //                 a_clone2[property] = a_clone2[property].map((item)=>{
                //                     return false;
                //                 });
                //             }else {
                //                 a_clone2[property]=false;
                //             }
                //         }
                //         a['dirty'] = a_clone2;
                //     });
                // },

  // doConfirm:function(article, event){
                //     event.preventDefault();
                //     // 버튼직전 input태그를 찾는다.
                //     let last = event.target.parentNode.lastChild;
                //     while( last.nodeName != 'LI') {
                //         last = last.previousElementSibling;
                //     }

                //     // 인수와 같은 요소에 대해 값을 변경한다.
                //     // articles를 변경해도 watch가 동작하지않는데, 이유를 알수없다.
                //     _article={};
                //     this.articles.forEach( (a, i) => {
                //         if(a==article) {
                //             _article = this.articles[i];
                //         }
                //     });

                //     while (last != null) {
                //         // li안의 input tag
                //         const input_tag = last.firstChild;

                //         // input태그의 이름을 가져온다.
                //         const attr = input_tag.getAttribute('name'),
                //               value = input_tag.value,
                //               index = (last.getAttribute("data-index")==undefined)? 0
                //                                 : Number(last.getAttribute("data-index"));

                //         _article[attr][index] = value;
                //         console.log("ar mod2:", value, attr, index);

                //         last = last.previousElementSibling;
                //     }
                //     // dirty 체크를 수행한다.
                //     // this.calculate_dirty();
                //     this.$service.refresh(this.cached);
                // },                                
                // calculate_dirty:function(lst) {
                //     if(!lst) {
                //         lst = this.cached;
                //     }

                //     lst.forEach((a) => {
                //         for(var p in a) {
                //             if (p=='org' || p=='dirty') {
                //                 continue;
                //             }
                //             if(a[p] instanceof Array) {
                //                 a[p].forEach((item,ix)=>{
                //                     // a['dirty'][p][ix]가 ""이면 삭제된 항목
                //                     if (a['dirty'][p][ix]==false && item != a['org'][p][ix]) {
                //                         a['dirty'][p][ix] = true;
                //                     }
                //                 });
                //             } else {
                //                 if (a[p] != a['org'][p]) {
                //                     a['dirty'][p] = true;
                //                 }
                //             }
                //         }
                //     });
                //     console.log("[articles watch] ", lst);
                // },